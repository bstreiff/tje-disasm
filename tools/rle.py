#!/usr/bin/env python3

import io

class RleDecompressor:
    def decompress(data, max_length=0):
        if (type(data) is bytes or type(data) is bytearray):
           data = io.BytesIO(data)

        decompressed = bytearray()

        while max_length != 0 and len(decompressed) <= max_length:
            if data.peek(1) == 0:
               break
            token = data.read(1)[0]

            # need this to be a signed byte to make the conditionals work out
            if (token >= 128):
               token = -(256 - token);

            if (token <= -64):
                count = -64 - token
                decompressed.extend( (b'\x00' * count) )
            elif (token >= 64):
                count = token - 64
                decompressed.extend( (b'\xFF' * count) )
            elif (token < 0):
                count = -token
                data_to_copy = data.read(1)[0]
                decompressed.extend( [data_to_copy] * count )
            else:
                count = token
                direct_data = data.read(count)
                decompressed.extend( direct_data )

        return bytes(decompressed)

# TODO; smaller testcases
if __name__ == "__main__":
    compressed = bytes([0xBC, 0x24, 0x44, 0x40, 0x00, 0x04, 0x44, 0xE4,
                        0x00, 0x4E, 0x04, 0xEE, 0x44, 0xE5, 0x04, 0x4E,
                        0xEE, 0xE6, 0x00, 0x44, 0xEE, 0xEE, 0xFF, 0xF4,
                        0x4E, 0xEE, 0x0F, 0xFF, 0x44, 0xEE, 0x00, 0x0F,
                        0xF4, 0x44, 0x00, 0x00, 0x0F, 0xFF, 0xA8, 0xFE,
                        0x44, 0x0F, 0x40, 0x00, 0x57, 0x55, 0x44, 0x44,
                        0x55, 0xEE, 0xEE, 0xE4, 0xE5, 0x55, 0x6E, 0xEE,
                        0x57, 0xFE, 0x5E, 0xFE, 0xEE, 0x08, 0x55, 0x64,
                        0x4E, 0x55, 0x75, 0x00, 0x04, 0x44, 0x43, 0x01,
                        0x4F, 0x47, 0xA0, 0x01, 0x40, 0xBD, 0x01, 0x44,
                        0xBD, 0x14, 0xE4, 0x40, 0x00, 0x00, 0xEE, 0x44,
                        0x00, 0x00, 0x4E, 0xE4, 0x40, 0x00, 0x44, 0x44,
                        0x40, 0x00, 0xFF, 0xFF, 0xF0, 0x00, 0x43, 0xA7])

    expected = bytes([0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x04,
                      0x44, 0xE4, 0x00, 0x4E, 0x04, 0xEE, 0x44, 0xE5,
                      0x04, 0x4E, 0xEE, 0xE6, 0x00, 0x44, 0xEE, 0xEE,
                      0xFF, 0xF4, 0x4E, 0xEE, 0x0F, 0xFF, 0x44, 0xEE,
                      0x00, 0x0F, 0xF4, 0x44, 0x00, 0x00, 0x0F, 0xFF,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x44, 0x44, 0x40, 0x00, 0x57, 0x55, 0x44, 0x44,
                      0x55, 0xEE, 0xEE, 0xE4, 0xE5, 0x55, 0x6E, 0xEE,
                      0x57, 0x5E, 0x5E, 0xEE, 0xEE, 0x55, 0x64, 0x4E,
                      0x55, 0x75, 0x00, 0x04, 0x44, 0xFF, 0xFF, 0xFF,
                      0x4F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x40, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
                      0xE4, 0x40, 0x00, 0x00, 0xEE, 0x44, 0x00, 0x00,
                      0x4E, 0xE4, 0x40, 0x00, 0x44, 0x44, 0x40, 0x00,
                      0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

    print(RleDecompressor.decompress(compressed, 512) == expected)
